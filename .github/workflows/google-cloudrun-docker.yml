name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: '${{ secrets.PROJECT_ID }}'
  GAR_LOCATION: '${{ secrets.GAR_LOCATION }}'
  SERVICE: '${{ secrets.SERVICE_NAME }}'
  REGION: '${{ secrets.REGION }}'
  SECRET_ID: '${{ secrets.SECRET_ID }}'
  SECRET_NAME: '${{ secrets.SECRET_NAME }}'

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.SERVICE_ACCOUNT_KEY }}'
          token_format: 'access_token'

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ env.ARTIFACT_REGISTRY_TOKEN }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

        env:
          ARTIFACT_REGISTRY_TOKEN: ${{ steps.auth.outputs.access_token }}

      - name: List Files in Directory
        run: ls -la
        working-directory: backend

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"
        working-directory: backend

      - name: Pull Secrets
        id: secrets
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            GEMINI_API_KEY: projects/${{ env.SECRET_ID }}/secrets/${{ env.SECRET_NAME }}/versions/latest


      - name: Deploy to Cloud Run
        id: deploy
        run: |-
          gcloud run deploy ${{ env.SERVICE }} \
            --image="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}" \
            --region="${{ env.GAR_LOCATION }}" \
            --platform=managed \
            --port=8080 \
            --no-allow-unauthenticated \
            --set-env-vars=GEMINI_API_KEY=${{ steps.secrets.outputs.GEMINI_API_KEY }} \

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
